// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/jamesjoshuahill/go-retry"
)

type FakeOperation struct {
	TryStub        func() (bool, error)
	tryMutex       sync.RWMutex
	tryArgsForCall []struct{}
	tryReturns     struct {
		result1 bool
		result2 error
	}
	tryReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOperation) Try() (bool, error) {
	fake.tryMutex.Lock()
	ret, specificReturn := fake.tryReturnsOnCall[len(fake.tryArgsForCall)]
	fake.tryArgsForCall = append(fake.tryArgsForCall, struct{}{})
	fake.recordInvocation("Try", []interface{}{})
	fake.tryMutex.Unlock()
	if fake.TryStub != nil {
		return fake.TryStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tryReturns.result1, fake.tryReturns.result2
}

func (fake *FakeOperation) TryCallCount() int {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return len(fake.tryArgsForCall)
}

func (fake *FakeOperation) TryReturns(result1 bool, result2 error) {
	fake.TryStub = nil
	fake.tryReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOperation) TryReturnsOnCall(i int, result1 bool, result2 error) {
	fake.TryStub = nil
	if fake.tryReturnsOnCall == nil {
		fake.tryReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.tryReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOperation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOperation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retry.Operation = new(FakeOperation)
