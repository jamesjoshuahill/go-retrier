// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/jamesjoshuahill/go-retry"
)

type FakeStopper struct {
	StopStub        func(err error) bool
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		err error
	}
	stopReturns struct {
		result1 bool
	}
	stopReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStopper) Stop(err error) bool {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		err error
	}{err})
	fake.recordInvocation("Stop", []interface{}{err})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub(err)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stopReturns.result1
}

func (fake *FakeStopper) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeStopper) StopArgsForCall(i int) error {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.stopArgsForCall[i].err
}

func (fake *FakeStopper) StopReturns(result1 bool) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStopper) StopReturnsOnCall(i int, result1 bool) {
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStopper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStopper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retry.Stopper = new(FakeStopper)
