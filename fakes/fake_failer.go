// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/jamesjoshuahill/go-retry"
)

type FakeFailer struct {
	FailStub        func(err error) bool
	failMutex       sync.RWMutex
	failArgsForCall []struct {
		err error
	}
	failReturns struct {
		result1 bool
	}
	failReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFailer) Fail(err error) bool {
	fake.failMutex.Lock()
	ret, specificReturn := fake.failReturnsOnCall[len(fake.failArgsForCall)]
	fake.failArgsForCall = append(fake.failArgsForCall, struct {
		err error
	}{err})
	fake.recordInvocation("Fail", []interface{}{err})
	fake.failMutex.Unlock()
	if fake.FailStub != nil {
		return fake.FailStub(err)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.failReturns.result1
}

func (fake *FakeFailer) FailCallCount() int {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return len(fake.failArgsForCall)
}

func (fake *FakeFailer) FailArgsForCall(i int) error {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return fake.failArgsForCall[i].err
}

func (fake *FakeFailer) FailReturns(result1 bool) {
	fake.FailStub = nil
	fake.failReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFailer) FailReturnsOnCall(i int, result1 bool) {
	fake.FailStub = nil
	if fake.failReturnsOnCall == nil {
		fake.failReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.failReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFailer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFailer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retry.Failer = new(FakeFailer)
